#!/usr/bin/env python3
import json
import logging
import os

import click
from boto3 import client


logger = logging.getLogger()

ec2_client = client('ec2')


def get_state_reason(instance):
    instance_state = instance['State']['Name']
    if instance_state not in ['running', 'pending']:
        return instance['StateReason']['Message']


def apply_style(state, string):
    fg = None
    italic = False

    if state == "pending":
        fg = 'green'
        italic = True
    elif state == "running":
        fg = 'green'
        italic = False
    elif state == "shutting-down":
        fg = 'red'
        italic = True
    elif state == "terminated":
        fg = 'red'
        italic = False
    elif state == "stopping":
        fg = None
        italic = True
    elif state == "stopped":
        fg = None
        italic = False

    return click.style(string, fg=fg, underline=italic)

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.version_option("1.0.0", '-v', '--version', prog_name='Kandula CLI')
@click.group(context_settings=CONTEXT_SETTINGS)
@click.pass_context
def kancli(ctx):
    """
    Welcome to Kandula CLI!
    
    The tool provides command line interface
    to operate Kandula application servers.

    Kandula servers must have tag <main_tag_key>
    with value <main_tag_value> which can be adjusted
    in 'settings.json' file.
    
    \b
    Default values are:
    - main_tag_key:   Project
    - main_tag_value: kandula
    """

    settings_fp = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'settings.json')
    try:
        with open(settings_fp, 'r') as f:
            settings = json.load(f)

        main_tag_key = settings['main_tag_key']
        main_tag_value = settings['main_tag_value']
    except:
        main_tag_key = "Project"
        main_tag_value = "kandula"

    ctx.ensure_object(dict)
    ctx.obj['main_tag_key'] = main_tag_key
    ctx.obj['main_tag_value'] = main_tag_value


def get_instances_data(ctx, state):
    main_tag_key = ctx.obj['main_tag_key']
    main_tag_value = ctx.obj['main_tag_value']

    try:
        response = ec2_client.describe_instances()
    except Exception as e:
        logger.exception(e)

    if response['ResponseMetadata']['HTTPStatusCode'] != 200:
        logger.exception("Bad request.")

    instances_data = [i for res in response['Reservations'] for i in res['Instances']]

    instances = []
    for i in instances_data:
        new_i = {}

        name = "no name"
        flag = False
        for tag_data in i["Tags"]:
            if tag_data["Key"] == "Name":
                name = tag_data["Value"]

            if tag_data["Key"] == main_tag_key and tag_data["Value"] == main_tag_value:
                flag = True
        
        if flag == False:
            continue

        i_state = i['State']['Name']
        if 'all' not in state and i_state not in state:
            continue

        # Keys similar for all instances.
        new_i['Cloud'] = 'aws'
        new_i['Region'] = ec2_client.meta.region_name

        # Keys being present regardless of instance state.
        new_i["Name"] = name
        new_i['Id'] = i['InstanceId']
        new_i['Type'] = i['InstanceType']
        new_i['ImageId'] = i['ImageId']
        new_i['LaunchTime'] = i['LaunchTime']
        new_i['State'] = i_state
        new_i['StateReason'] = get_state_reason(i)
        new_i['PrivateDnsName'] = i['PrivateDnsName']
        new_i['PublicDnsName'] = i['PublicDnsName']
        new_i['RootDeviceName'] = i['RootDeviceName']
        new_i['RootDeviceType'] = i['RootDeviceType']
        new_i['SecurityGroups'] = i['SecurityGroups']
        new_i['Tags'] = i['Tags']

        # Keys dependent on instance state.
        new_i['SubnetId'] = i.get('SubnetId')
        new_i['VpcId'] = i.get('VpcId')
        new_i['PrivateIpAddress'] = i.get('PrivateIpAddress')
        new_i['PublicIpAddress'] = i.get('PublicIpAddress')

        if len(i['NetworkInterfaces']) > 0:
            new_i['MacAddress'] = i['NetworkInterfaces'][0]['MacAddress']
            new_i['NetworkInterfaceId'] = i['NetworkInterfaces'][0]['NetworkInterfaceId']
        else:
            new_i['MacAddress'] = None
            new_i['NetworkInterfaceId'] = None

        instances.append(new_i)

    instances = sorted(instances, key=lambda x: x["Name"])
    return instances


def get_full_text(instances):
    text = click.style("Kandula instances:", bold=True)

    for i in instances:
        string = apply_style(i["State"], i.pop('Name'))
        text += click.style(f"\n\n- {string}", bold=True)

        for k,v in i.items():
            if k == "State":
                v = apply_style(i["State"], v)
            elif k == "SecurityGroups":
                v = ', '.join( map(lambda x: f"{x['GroupName']} ({x['GroupId']})", v) )
            elif k == "Tags":
                v = ', '.join( map(lambda x: f"{x['Key']}={x['Value']}", v) )
            text += f"\n     {k}: {v}"
    return text


def get_short_text(instances):
    text = click.style("Kandula instances:", bold=True)
    for i in instances:
        string = apply_style(i["State"], i['Name'])
        text += f"\n- {string}"
    return text


@kancli.command('get-instances', short_help="")
@click.option('-s', '--state', type=click.Choice(['all', 'pending', 'running',
                                                  'shutting-down', 'terminated',
                                                  'stopping', 'stopped']),
              multiple=True, default=['all'], help="Filter instances according to state (default is 'all').")
@click.option('-f', '--full', is_flag=True, default=False,
              help="Return all data about instances.")
@click.option('-o', '--output', type=click.Choice(['text', 'json']),
              default='text', help="Output format (default is 'text').")
@click.option('-v', count=True, help="Print logging info (-vvv is the most detailed level).")
@click.pass_context
def get_instances(ctx, state, full, output, v):
    """
    Get instances sorted by name.
    """

    state = sorted(set(state))
    instances = get_instances_data(ctx, state)

    if len(instances) == 0:
        click.secho(f'No Kandula instances found.', bold=True)
        return

    if full:
        if output == "text":
            click.echo_via_pager(get_full_text(instances))
        elif output == "json":
            click.echo(json.dumps(instances, indent=4, default=str))
    else:
        if output == "text":
            #click.echo_via_pager(get_short_text(instances))
            click.echo(get_short_text(instances))
        elif output == "json":
            instances = list(map(lambda x: x["Name"], instances))
            click.echo(json.dumps(instances, indent=4, default=str))


@kancli.command('start-instances', short_help="")
@click.option('--dry-run', is_flag=True, default=False,
              help='Show the result of operation without actually running it.')
@click.option('-v', count=True, help="Print logging info (-vvv is the most detailed level).")
@click.argument('name', nargs=-1, required=True)
@click.pass_context
def start_instances(ctx, dry_run, v, name):
    """
    Start instances.

    Only instances in stopped state can be started.
    Instances in other states are ignored.
    """
    
    instances_data = get_instances_data(ctx, state=['all'])
    ready_instance_ids = []
    click.echo('Checking instances:')
    for i in name:
        for j in instances_data:
            if i == j['Name'] and j['State'] == 'stopped':
                click.echo(f"- instance '{i}': ready to start")
                ready_instance_ids.append(j['Id'])
                break
        else:
            click.echo(f"- instance '{i}': ignored")

    if len(ready_instance_ids) == 0:
        click.echo('\nNo instances to start.')
        return

    if not dry_run:
        ret = click.confirm('Do you want to run the operation?')
        if ret == False:
            ctx.abort()

        ec2_client.start_instances(InstanceIds=ready_instance_ids)
        click.echo('Instances were instructed to start.')


@kancli.command('stop-instances', short_help="")
@click.option('--dry-run', is_flag=True, default=False,
              help='Show the result of operation without actually running it.')
@click.option('-v', count=True, help="Print logging info (-vvv is the most detailed level).")
@click.argument('name', nargs=-1, required=True)
@click.pass_context
def stop_instances(ctx, dry_run, v, name):
    """
    Stop instances.

    Only instances in running or pending state can be stopped.
    Instances in other states are ignored.
    """

    instances_data = get_instances_data(ctx, state=['all'])
    ready_instance_ids = []
    click.echo('Checking instances:')
    for i in name:
        for j in instances_data:
            if i == j['Name'] and j['State'] in ['running', 'pending']:
                click.echo(f"- instance '{i}': ready to stop")
                ready_instance_ids.append(j['Id'])
                break
        else:
            click.echo(f"- instance '{i}': ignored")

    if len(ready_instance_ids) == 0:
        click.echo('\nNo instances to stop.')
        return

    if not dry_run:
        ret = click.confirm('Do you want to run the operation?')
        if ret == False:
            ctx.abort()

        ec2_client.stop_instances(InstanceIds=ready_instance_ids)
        click.echo('Instances were instructed to stop.')


@kancli.command('terminate-instances', short_help="")
@click.option('--dry-run', is_flag=True, default=False,
              help='Show the result of operation without actually running it.')
@click.option('-v', count=True, help="Print logging info (-vvv is the most detailed level).")
@click.argument('name', nargs=-1, required=True)
@click.pass_context
def terminate_instances(ctx, dry_run, v, name):
    """
    Terminate instances.

    Instances already in shutting-down or terminated states are ignored.
    """

    instances_data = get_instances_data(ctx, state=['all'])
    ready_instance_ids = []
    click.echo('Checking instances:')
    for i in name:
        for j in instances_data:
            if i == j['Name'] and j['State'] not in ['shutting-down', 'terminated']:
                click.echo(f"- instance '{i}': ready to terminate")
                ready_instance_ids.append(j['Id'])
                break
        else:
            click.echo(f"- instance '{i}': ignored")

    if len(ready_instance_ids) == 0:
        click.echo('\nNo instances to terminate.')
        return

    if not dry_run:
        ret = click.confirm('Do you want to run the operation?')
        if ret == False:
            ctx.abort()

        ec2_client.terminate_instances(InstanceIds=ready_instance_ids)
        click.echo('Instances were instructed to terminate.')


if __name__ == '__main__':
    kancli()
